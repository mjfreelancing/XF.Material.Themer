<?xml version="1.0" encoding="utf-8" ?>
<ResourceDictionary
  x:Class="XF.Material.Themer.Themes.LightThemeStyles"
  xmlns="http://xamarin.com/schemas/2014/forms"
  xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
  xmlns:converters="clr-namespace:XF.Material.Themer.Converters;assembly=XF.Material.Themer"
  xmlns:d="http://xamarin.com/schemas/2014/forms/design"
  xmlns:font="clr-namespace:XF.Material.Themer.Helpers;assembly=XF.Material.Themer"
  xmlns:local="clr-namespace:XF.Material.Themer;assembly=XF.Material.Themer"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:pancake="clr-namespace:Xamarin.Forms.PancakeView;assembly=Xamarin.Forms.PancakeView"
  xmlns:themeModels="clr-namespace:XF.Material.Themer.Models.Themes;assembly=XF.Material.Themer"
  mc:Ignorable="d">

  <converters:ColorOpacityConverter x:Key="ColorOpacityConverter" />

  <Style x:Key="ThemedFrame" TargetType="Frame">
    <Setter Property="BackgroundColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Surface}" />
    <Setter Property="BorderColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Primary}" />
    <Setter Property="CornerRadius" Value="0" />
  </Style>

  <Style x:Key="ThemedTimeZoneTitle" TargetType="Label">
    <Setter Property="FontAttributes" Value="Bold" />
    <Setter Property="FontSize" Value="24" />
    <Setter Property="TextColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSurface}" />
  </Style>

  <Style
    x:Key="ThemedTimeZoneCellStyle"
    BasedOn="{StaticResource PancakeStyle}"
    TargetType="pancake:PancakeView">
    <Setter Property="BackgroundColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSurface}" />
  </Style>

  <Style x:Key="ThemedTimeZoneCarouselPancakeStyle" TargetType="pancake:PancakeView">
    <Setter Property="Padding" Value="8" />
    <Setter Property="CornerRadius" Value="8" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BackgroundColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Surface}" />
    <Setter Property="BorderColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSurface}" />
    <Setter Property="IsClippedToBounds" Value="True" />
  </Style>

  <Style x:Key="ThemedTimeZoneContentStyle" TargetType="pancake:PancakeView">
    <Setter Property="CornerRadius" Value="0" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="IsClippedToBounds" Value="True" />
    <Setter Property="VisualStateManager.VisualStateGroups">
      <VisualStateGroupList>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal">
            <VisualState.Setters>
              <Setter Property="BackgroundColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Surface}" />
              <Setter Property="BorderColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSurface}" />
            </VisualState.Setters>
          </VisualState>
          <VisualState x:Name="Selected">
            <VisualState.Setters>
              <Setter Property="BackgroundColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=BrandedSurface}" />
              <Setter Property="BorderColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Primary}" />
            </VisualState.Setters>
          </VisualState>
        </VisualStateGroup>
      </VisualStateGroupList>
    </Setter>
  </Style>

  <Style x:Key="ThemedSecondaryFabStyle" TargetType="pancake:PancakeView">
    <Setter Property="CornerRadius" Value="26" />
    <Setter Property="IsClippedToBounds" Value="True" />
    <Setter Property="WidthRequest" Value="52" />
    <Setter Property="HeightRequest" Value="52" />
    <Setter Property="HasShadow" Value="True" />
    <Setter Property="BackgroundColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Secondary}" />
    <Setter Property="Content">
      <Setter.Value>
        <Image HorizontalOptions="Center" VerticalOptions="Center">
          <Image.Source>
            <FontImageSource
              FontFamily="{StaticResource MaterialFontFamily}"
              Glyph="{x:Static font:IconFont.HomeMapMarker}"
              Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSecondary, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />
          </Image.Source>
        </Image>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ThemedWeatherBackgroundStyle" TargetType="ContentView">
    <Setter Property="BackgroundColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Primary}" />
  </Style>

  <Style x:Key="ThemedWeatherTitle" TargetType="Label">
    <Setter Property="FontAttributes" Value="Bold" />
    <Setter Property="FontSize" Value="24" />
    <Setter Property="TextColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnPrimary}" />
  </Style>

  <Style x:Key="ThemedWeatherContentStyle" TargetType="Grid">
    <Setter Property="BackgroundColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Primary}" />
  </Style>

  <pancake:GradientStopCollection x:Key="ThemedWeatherBackgroundGradients">
    <!--<pancake:GradientStop Offset="0" Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Primary}" />
    <pancake:GradientStop Offset="0.9" Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Primary}" />
    <pancake:GradientStop Offset="1" Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Surface}" />-->
    <pancake:GradientStop Offset="0" Color="White" />
    <pancake:GradientStop Offset="0.2" Color="White" />
    <pancake:GradientStop Offset="1" Color="White" />
  </pancake:GradientStopCollection>

  <FontImageSource
    x:Key="ThemedWeatherCloudStorm"
    FontFamily="{StaticResource MaterialFontFamily}"
    Glyph="{x:Static font:IconFont.WeatherLightningRainy}"
    Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnPrimary, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />

  <FontImageSource
    x:Key="ThemedWeatherWindy"
    FontFamily="{StaticResource MaterialFontFamily}"
    Glyph="{x:Static font:IconFont.WeatherWindy}"
    Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnPrimary, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />

  <FontImageSource
    x:Key="ThemedWeatherWater"
    FontFamily="{StaticResource MaterialFontFamily}"
    Glyph="{x:Static font:IconFont.Water}"
    Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnPrimary, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />

  <FontImageSource
    x:Key="ThemedWeatherPouring"
    FontFamily="{StaticResource MaterialFontFamily}"
    Glyph="{x:Static font:IconFont.WeatherPouring}"
    Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnPrimary, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />

  <Style x:Key="ThemeWeatherImageStyle" TargetType="Image">
    <Setter Property="Aspect" Value="AspectFit" />
  </Style>

  <Style x:Key="ThemedWeatherHighTextStyle" TargetType="Label">
    <Setter Property="TextColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnPrimary, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />
  </Style>

  <Style x:Key="ThemedWeatherMediumTextStyle" TargetType="Label">
    <Setter Property="TextColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnPrimary, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.MediumEmphasisOpacity}}" />
  </Style>

  <Style x:Key="ThemedWeatherForecastStyle" TargetType="Frame">
    <Setter Property="BackgroundColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=Surface}" />
  </Style>

  <Style x:Key="ThemedForecastTextStyle" TargetType="Label">
    <Setter Property="FontSize" Value="16" />
  </Style>

  <Style
    x:Key="ThemedForecastHighTextStyle"
    BasedOn="{StaticResource ThemedForecastTextStyle}"
    TargetType="Label">
    <Setter Property="TextColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSurface, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />
  </Style>

  <Style
    x:Key="ThemedForecastMediumTextStyle"
    BasedOn="{StaticResource ThemedForecastTextStyle}"
    TargetType="Label">
    <Setter Property="TextColor" Value="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSurface, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.MediumEmphasisOpacity}}" />
  </Style>

  <FontImageSource
    x:Key="ThemedForecastWindy"
    FontFamily="{StaticResource MaterialFontFamily}"
    Glyph="{x:Static font:IconFont.WeatherWindy}"
    Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSurface, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />

  <FontImageSource
    x:Key="ThemedForecastWater"
    FontFamily="{StaticResource MaterialFontFamily}"
    Glyph="{x:Static font:IconFont.Water}"
    Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSurface, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />

  <FontImageSource
    x:Key="ThemedForecastThermometer"
    FontFamily="{StaticResource MaterialFontFamily}"
    Glyph="{x:Static font:IconFont.Thermometer}"
    Color="{Binding Source={x:Static themeModels:CurrentTheme.Instance}, Path=OnSurface, Converter={StaticResource ColorOpacityConverter}, ConverterParameter={x:Static local:Constants.HighEmphasisOpacity}}" />

</ResourceDictionary>